import axios from 'axios';
import { getAuth } from "firebase/auth";
const API_URL = "http://localhost:8000/posts/userinfo"; // Ajustada la URL

// Función para crear un nuevo registro de usuario


export const addUserInfo = async (userInfo) => {
    const auth = getAuth();
    const user = auth.currentUser;

    if (!user) {
        throw new Error('El usuario no está autenticado.');
    }

    try {
        const token = await user.getIdToken();
        const response = await axios.post(API_URL, userInfo, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
        });

        return response.data;
    } catch (error) {
        console.error('Error al crear el registro:', error.response?.data || error.message);
        throw error;
    }
};


import React from "react";
import { useForm } from "react-hook-form";
import { addUserInfo } from "./service/UserInfService.js"; // Importa el servicio que envía los datos
import { useNavigate } from "react-router-dom";

const Form = ({ onActualizarNombre, onActualizarProfesion }) => {
    const { register, formState: { errors }, handleSubmit } = useForm();
    const navigate = useNavigate();

    // Función que se ejecuta cuando se envía el formulario
    const onSubmit = async (data) => {
        // Actualizar el nombre y la profesión en el estado del componente padre
        onActualizarNombre(data.fullname);
        onActualizarProfesion(data.profession);

        try {
            // Llama al servicio que envía los datos al backend
            const response = await addUserInfo(data);
            console.log('Información del usuario creada:', response);
            navigate('/home'); // Redirigir a la página principal o donde prefieras
        } catch (error) {
            console.error('Error al enviar la información:', error);
        }
    };

    return (
        <div className="flex-1 bg-[#182637] shadow-[0_20px_40px_rgba(255,255,255,0.3)] p-6 rounded-lg">
            <h2 className="text-white text-2xl font-bold mb-4">Actualiza tu Información</h2>
            <form className="grid grid-cols-2 gap-2" onSubmit={handleSubmit(onSubmit)}>
                {/* Nombre Completo */}
                <div className="col-span-2">
                    <label className="text-white">Nombre Completo</label>
                    <input 
                        type="text" 
                        placeholder="Escribe tu nombre completo"
                        className="w-full p-2 mt-1 rounded-lg"
                        {...register("fullname", { required: true })}
                    />
                    {errors.fullname && <span className="text-red-500">El nombre completo es requerido</span>}
                </div>

                {/* Correo */}
                <div className="col-span-2">
                    <label className="text-white">Correo Electrónico</label>
                    <input 
                        type="email" 
                        placeholder="Escribe tu correo electrónico"
                        className="w-full p-2 mt-1 rounded-lg"
                        {...register("email", { 
                            required: "El correo es requerido", 
                            pattern: {
                                value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/,
                                message: "Formato de correo inválido"
                            } 
                        })}
                    />
                    {errors.email && <span className="text-red-500">{errors.email.message}</span>}
                </div>

                {/* Teléfono */}
                <div className="col-span-2">
                    <label className="text-white">Número de Teléfono</label>
                    <input 
                        type="tel" 
                        placeholder="Escribe tu número de teléfono"
                        className="w-full p-2 mt-1 rounded-lg"
                        {...register("phone", { 
                            required: "El teléfono es requerido", 
                            pattern: {
                                value: /^[0-9]{10,15}$/,
                                message: "El número de teléfono no es válido"
                            } 
                        })}
                    />
                    {errors.phone && <span className="text-red-500">{errors.phone.message}</span>}
                </div>

                {/* Ubicación */}
                <div className="col-span-2">
                    <label className="text-white">Ubicación</label>
                    <input 
                        type="text" 
                        placeholder="Escribe tu ubicación"
                        className="w-full p-2 mt-1 rounded-lg"
                        {...register("location", { required: true })}
                    />
                    {errors.location && <span className="text-red-500">La ubicación es requerida</span>}
                </div>

                {/* Profesión */}
                <div className="col-span-2">
                    <label className="text-white">Profesión</label>
                    <input 
                        type="text" 
                        placeholder="Escribe tu profesión"
                        className="w-full p-2 mt-1 rounded-lg"
                        {...register("profession", { required: true })}
                    />
                    {errors.profession && <span className="text-red-500">La profesión es requerida</span>}
                </div>

                {/* Botón para actualizar información */}
                <div className="col-span-2">
                    <input 
                        type="submit" 
                        value='Actualizar Información' 
                        className="bg-[#ff914d] text-white font-bold py-2 px-4 rounded cursor-pointer w-full"
                    />
                </div>
            </form>
        </div>
    );
}

export default Form;

import '../../Stylesheet/Login/Login.css';
import InfoUserLeft from './InfoUserLeft';
import Form from './form';
import { useState } from 'react';
import { getAuth } from "firebase/auth";
import axios from 'axios';

function UserInfo() {

    const [nombreCompleto, setNombreCompleto] = useState('');
    const [profesion, setProfesion] = useState('');
    const [email, setEmail] = useState('');
    const [telefono, setTelefono] = useState('');
    const [ubicacion, setUbicacion] = useState('');

    // Función para actualizar el nombre completo
    const actualizarNombreCompleto = (nombre) => {
        setNombreCompleto(`${nombre} `);
    };

    const actualizarProfesion = (profesion) => {
        setProfesion(`${profesion} `);
    };

    // Aquí integras la función enviarInformacionUsuario
    const enviarInformacionUsuario = async () => {
        const auth = getAuth();
        const user = auth.currentUser;

        if (user) {
            try {
                const token = await user.getIdToken(); // Obtén el token JWT
                const userInfo = {
                    fullname: nombreCompleto,
                    profession: profesion,
                    email: email,
                    phone: telefono,
                    location: ubicacion
                };

                // Envía la información al backend
                const response = await axios.post('/userinfo', userInfo, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}` // Enviar token en el header
                    }
                });

                console.log('Información enviada:', response.data);
            } catch (error) {
                console.error('Error al enviar la información:', error.message);
            }
        } else {
            console.log('No hay un usuario autenticado.');
        }
    };

    // Función que maneja el envío del formulario
    const handleSubmit = (event) => {
        event.preventDefault();
        enviarInformacionUsuario();
    };

    return (
        <div className="flex items-center justify-center min-h-screen bg-[#182637] shadow-lg p-4">
            <div className="flex gap-10 w-[85%]">
                <InfoUserLeft nombreCompleto={nombreCompleto} profesion={profesion} />
                
                {/* Aquí incluyes el form, y lo conectas con la función de envío */}
                <Form
                    onActualizarNombre={actualizarNombreCompleto}
                    onActualizarProfesion={actualizarProfesion}
                    setEmail={setEmail}
                    setTelefono={setTelefono}
                    setUbicacion={setUbicacion}
                    handleSubmit={handleSubmit} // Pasa la función handleSubmit al formulario
                />
            </div>
        </div>
    );
}

export default UserInfo;

import InfoModel from "../models/InfoModel.js";
import mongoose from "mongoose";

export const createInfo = async (req, res) => {
    try {
        const firebaseUid = req.user.uid; // Asegúrate de que req.user exista
        const { fullname, profession, email, phone, location } = req.body;

        const newInfo = new InfoModel({
            firebaseUid,
            fullname,
            profession,
            email,
            phone,
            location
        });

        await newInfo.save();
        res.status(201).json({ message: 'Información creada exitosamente.' });
    } catch (error) {
        console.error('Error al crear la información:', error);
        res.status(500).json({ message: 'Error al crear la información.' });
    }
};

export const updateInfo = async (req, res) => {
    try {
        const id = req.params.id;
        const updatedInfo = await InfoModel.findByIdAndUpdate(id, req.body, { new: true });
        if (!updatedInfo) return res.status(404).json({ message: "Información de usuario no encontrada" });
        res.status(200).json({
            message: "Información de usuario actualizada correctamente!",
            post: updatedInfo
        });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

// Buscar un usuario por id_user y retornar el fullname
export const getFullnameById = async (req, res) => {
    try {
        const { id_user } = req.params;  // Obtener id_user de los parámetros
        const userInfo = await InfoModel.findOne({ id_user });  // Buscar en la base de datos
        if (!userInfo) {
            return res.status(404).json({ message: "Usuario no encontrado" });
        }
        res.status(200).json({ fullname: userInfo.fullname });  // Retornar el fullname
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

import express from 'express';
import { 
    getAllPosts, 
    getPostById, 
    createPost, 
    updatePost, 
    deletePost, 
    addComment, 
    addReply,
    getCommentsByPostId,
    getRepliesByCommentId
} from '../controllers/postController.js';

import { createInfo, updateInfo } from '../controllers/userInfController.js';

import { verifyToken } from '../Middleware/authMiddleware.js';

import { registerUser, loginUser } from '../controllers/UserController.js';

const router = express.Router();

// Rutas de CRUD
router.get('/', getAllPosts);           // Obtener todos los posts
router.get('/:id', getPostById);        // Obtener un post por ID
router.post('/', createPost);           // Crear un nuevo post
router.put('/:id', updatePost);         // Actualizar un post por ID
router.delete('/:id', deletePost);      // Eliminar un post por ID

// Rutas para manejar comentarios y respuestas
router.post('/:id/comments', addComment); // Agregar un comentario a un post
router.get('/:id/comments', getCommentsByPostId); // Obtener todos los comentarios de un post
router.post('/:id/comments/:commentId/replies', addReply); // Agregar una respuesta a un comentario
router.get('/:id/comments/:commentId/replies', getRepliesByCommentId); // Obtener respuestas de un comentario

// Rutas de la información del usuario
router.post('/userinfo', verifyToken, createInfo);
router.put('/userinfo/:id', verifyToken, updateInfo);
// Rutas user
router.post('/register', registerUser);
router.post('/login', loginUser);

export default router;


import jwt from 'jsonwebtoken';
import admin from 'firebase-admin';

// Ajusta el path a tu archivo de cuenta de servicio
const serviceAccount = 'Middleware/serviceAccount.json';

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),  // Usa las credenciales de tu cuenta de servicio
});

export const verifyToken = async (req, res, next) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
        return res.status(401).json({ message: 'No se proporcionó un token de autenticación.' });
    }

    try {
        const decodedToken = await admin.auth().verifyIdToken(token);
        req.user = decodedToken;  // Guardar el token decodificado en req.user
        next();
    } catch (error) {
        console.error('Error al verificar el token de Firebase:', error);
        return res.status(403).json({ message: 'Token inválido o expirado.' });
    }
};

import express from 'express';
import cors from 'cors';
import postRoutes from './routes/routes.js'; // Asegúrate de que la ruta es correcta
import connectDB from './database/db.js'; // Ajusta la ruta si es necesario


const app = express();

// Conectar a la base de datos
connectDB();

// Middlewares
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Usar las rutas de posts
app.use('/posts', postRoutes); // Asegúrate de que esta línea esté bien configurada

// Iniciar el servidor
app.listen(8000, () => {
    console.log('Server UP running in http://localhost:8000/');
});
